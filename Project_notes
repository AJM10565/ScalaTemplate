Project 3a Work Plan
--------------------
Part 1a - Extend the ast.scala:
main/scala
We need to augment ast.scala with the following additional types:
factor ::= ident | ...
statement   ::= expression ";" | assignment | conditional | loop | block
assignment  ::= ident "=" expression ";"
conditional ::= "if" "(" expression ")" block [ "else" block ]
loop        ::= "while" "(" expression ")" block
block       ::= "{" statement* "}"

Part 1b - Extend the CombinatorParser.scala
main/scala
"Modify the top-level one to start with statement* (zero or more statements,
same as a block without curly braces) instead of expression."
Introduce new grammar productions for the five new constructs
and Indent using : // ident ::= [a-zA-Z] [a-zA-Z0-9]* (maybe with _ also)
test/scala
Add tests for your parser including concrete syntax for at least all your existing examples
and test fixtures as well as examples such as the ones below.

Part 2 - Expand the Unparser starting with the easy cases and going to the hard ones
test/scala
Write test cases for the unparser first.
main/scala
Write some unparser that creates a "pretty-print" form of the input as described in the following example:
minijs>  if(-3+4+5*6){while(0){x=3;y=5;{xy=88;}}}
You entered:  if(-3+4+5*6){while(0){x=3;y=5;{xy=88;}}}
The parsed statements are: ...
The unparsed statements are:
{
  if (((-3 + 4) + (5 * 6))) {
    while (0) {
      x = 3;
      y = 5;
      {
        xy = 88;
      }
    }
  } else {
  }
}
